@page "/posts/{id:int}"
@using BlazorApp.Services
@inject IPostService Posts
@inject ICommentService Comments
@inject ICurrentUser CurrentUser

<h2>@_post?.Title</h2>

@if (_loading) { <p>Loading…</p> }
else if (_notFound) { <p>Not found.</p> }
else if (!string.IsNullOrWhiteSpace(_error)) { <p class="text-danger">@_error</p> }
else if (_post is not null)
{
    @if (!string.IsNullOrWhiteSpace(_post.Username))
    {
        <p class="text-muted">By @_post.Username</p>
    }
    <p>@_post.Body</p>

    <h4 class="mt-4">Comments (@_comments.Count)</h4>
    @if (_comments.Count == 0) { <p>No comments yet.</p> }
    else
    {
        <ul>
            @foreach (var c in _comments)
            {
                <li><strong>@c.Username:</strong> @c.Body</li>
            }
        </ul>
    }

    <h5 class="mt-3">Add a comment</h5>
    @if (!string.IsNullOrWhiteSpace(_formError)) { <p class="text-danger">@_formError</p> }
    <EditForm Model="_newComment" OnValidSubmit="AddComment">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputTextArea @bind-Value="_newComment.Body" class="form-control" rows="3" />
        <button class="btn btn-primary mt-2" type="submit">Comment</button>
    </EditForm>
}

@code {
    [Parameter] public int id { get; set; }

    private bool _loading = true;
    private bool _notFound;
    private string? _error;
    private string? _formError;

    private ApiContracts.DTOs.PostDTO? _post;
    private List<ApiContracts.DTOs.CommentDTO> _comments = new();
    private ApiContracts.DTOs.CreateCommentDTO _newComment = new() { Body = "" };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // include comments via API or load separately; we’ll do both (safe):
            _post = await Posts.GetByIdAsync(id, includeComments: false);
            if (_post is null) { _notFound = true; return; }

            var loaded = await Comments.GetForPostAsync(id);
            _comments = loaded.ToList();
        }
        catch (Exception ex) { _error = ex.Message; }
        finally { _loading = false; }
    }

    private async Task AddComment()
    {
        try
        {
            _newComment.PostId = id;
            _newComment.UserId = CurrentUser.UserId; // Step 5.3
            var created = await Comments.AddAsync(_newComment);
            _comments.Add(created);
            _newComment.Body = "";
            _formError = null;
        }
        catch (Exception ex) { _formError = ex.Message; }
    }
}
